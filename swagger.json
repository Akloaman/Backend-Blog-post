{
  "openapi": "3.0.0",
  "info": {
    "title": "Social Media API",
    "version": "1.0.0",
    "description": "API documentation for Social Media backend: Users, Posts, Comments."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string", "example": "john_doe" },
                  "email": { "type": "string", "format": "email", "example": "john@example.com" },
                  "password": { "type": "string", "example": "mypassword123" }
                },
                "required": ["username", "email", "password"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "User registered successfully" },
          "500": { "description": "Error registering user" }
        }
      }
    },

    "/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Logs in a user and creates a session",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": { "type": "string", "format": "email", "example": "john@example.com" },
                  "password": { "type": "string", "example": "mypassword123" }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "400": {
            "description": "Invalid username or password"
          }
        }
      }
    },

  
    "/users": {
      "get": {
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": { "description": "Error fetching users" }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "404": { "description": "User not found" },
          "500": { "description": "Error fetching user" }
        }
      },
      "put": {
        "summary": "Update a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string", "example": "john_updated" },
                  "email": { "type": "string", "format": "email", "example": "john_updated@example.com" }
                },
                "required": ["username", "email"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User updated" },
          "500": { "description": "Error updating user" }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": { "description": "User deleted" },
          "500": { "description": "Error deleting user" }
        }
      }
    },
    "/posts": {
      "post": {
        "summary": "Create a new post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": { "type": "integer", "example": 1, "description": "ID of user creating the post" },
                  "post_content": { "type": "string", "example": "This is my new post!" }
                },
                "required": ["user_id", "post_content"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Post created" },
          "500": { "description": "Error creating post" }
        }
      },
      "get": {
        "summary": "Get all posts",
        "responses": {
          "200": {
            "description": "List of all posts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Post"
                  }
                }
              }
            }
          },
          "500": { "description": "Error fetching posts" }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "summary": "Get a post by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Post ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "Post object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Post" }
              }
            }
          },
          "404": { "description": "Post not found" },
          "500": { "description": "Error fetching post" }
        }
      },
      "put": {
        "summary": "Update a post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Post ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_content": { "type": "string", "example": "Updated post content." }
                },
                "required": ["post_content"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Post updated" },
          "500": { "description": "Error updating post" }
        }
      },
      "delete": {
        "summary": "Delete a post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Post ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Post deleted." }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete post with comments"
          },
          "500": {
            "description": "Error deleting post"
          }
        }
      }
    },
    "/comments": {
      "post": {
        "summary": "Add a new comment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "post_id": { "type": "integer", "example": 1, "description": "ID of the post" },
                  "user_id": { "type": "integer", "example": 1, "description": "ID of user commenting" },
                  "comment_content": { "type": "string", "example": "Great post!" }
                },
                "required": ["post_id", "user_id", "comment_content"]
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Comment added" },
          "500": { "description": "Error adding comment" }
        }
      },
      "get": {
        "summary": "Get all comments",
        "responses": {
          "200": {
            "description": "List of all comments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Comment" }
                }
              }
            }
          },
          "500": { "description": "Error fetching comments" }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "summary": "Get comment by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Comment" }
              }
            }
          },
          "404": { "description": "Comment not found" },
          "500": { "description": "Error fetching comment" }
        }
      },
      "put": {
        "summary": "Update a comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment_content": { "type": "string", "example": "Updated comment text" }
                },
                "required": ["comment_content"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Comment updated" },
          "500": { "description": "Error updating comment" }
        }
      },
      "delete": {
        "summary": "Delete a comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Comment ID",
            "required": true,
            "schema": { "type": "integer", "example": 1 }
          }
        ],
        "responses": {
          "200": { "description": "Comment deleted" },
          "500": { "description": "Error deleting comment" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "user_id": { "type": "integer", "example": 1 },
          "username": { "type": "string", "example": "john_doe" },
          "email": { "type": "string", "format": "email", "example": "john@example.com" },
          "password": { "type": "string", "example": "hashed_password_here" },
          "registration_date": { "type": "string", "format": "date-time" }
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "post_id": { "type": "integer", "example": 1 },
          "user_id": { "type": "integer", "example": 1, "description": "Foreign key to User" },
          "post_content": { "type": "string", "example": "My first post!" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "comment_id": { "type": "integer", "example": 1 },
          "post_id": { "type": "integer", "example": 1, "description": "Foreign key to Post" },
          "user_id": { "type": "integer", "example": 1, "description": "Foreign key to User" },
          "comment_content": { "type": "string", "example": "Nice post!" },
          "created_at": { "type": "string", "format": "date-time" }
        }
      }
    }
  }
}
